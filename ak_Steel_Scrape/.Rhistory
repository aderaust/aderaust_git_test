ak_small <- drop_na(ak_total)
attach(what = c(ak_small, ak_small))
attach()
ak_small['index']
lm.fit <- lm(ak_small['price'] ~ ak_small['gauge'])
ak_small['price']
lm.fit <- lm(ak_small$price ~ ak_small$gauge)
summary(lm.fit)
lm.fit <- lm(ak_small$price ~ ak_small$gauge)
summary(lm.fit)
plot(ak_small$gauge, ak_small$price)
abline(lm.fit
d
)
lm.fit <- lm(ak_small$price ~ .)
lm.fit <- lm(ak_small$price ~ ., data = ak_small)
lm.fit <- lm(price ~ ., data = ak_small)
summary(lm.fit)
ak_small
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit)
library('car')
vif(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit <- lm(price ~ poly(.-location - index - defect - defect_code, 2), data = ak_small)
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
summary(lm.fit)$coeff[-1,4] < 0.05
ak_small[summary(lm.fit)$coeff[-1,4] < 0.05]
ak_small[:, summary(lm.fit)$coeff[-1,4] < 0.05]
ak_small[summary(lm.fit)$coeff[-1,4] < 0.05]
ak
summary(lm.fit)$coeff[-1,4] < 0.05
lm.fit2 <- lm(price ~ .-location - index - defect - defect_code - carbon - aluminium - niobium - weight, data = ak_small)
summary(lm.fit2)
vif(lm.fit2)
lm.fit2 <- lm(price ~ .-location - index - defect - defect_code - carbon - aluminium - niobium - weight - `linear feat`, data = ak_small)
summary(lm.fit2)
plot(lm.fit2)
lm.fit <- lm(log(price) ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
vif(lm.fit2)
plot(lm.fit2)
anova(lm.fit, lm.fit2)
VIF::
summary(lm(price ~ manganese, data = ak_small))
lm.fit_magnese <- lm(price ~ manganese, data = ak_small)
plot(ak_small$price, ak_small$manganese)
abline(lm.fit_magnese)
abline(lm.fit_magnese)
plot(ak_small$price, ak_small$manganese)
abline(lm.fit_magnese)
abline(lm.fit_magnese)
plot(ak_small$price, ak_small$manganese)
confint(lm.fit2)
anova(lm.fit, lm.fit_sig)
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit_sig <- lm(price ~ .-location - index - defect - defect_code - carbon - aluminium - niobium - weight - `linear feat`, data = ak_small)
summary(lm.fit_sig)
vif(lm.fit_sig)
plot(lm.fit_sig)
anova(lm.fit, lm.fit_sig)
confint(lm.fit_sig)
plot(hatvalues(lm.fit_sig))
which.max(hatvalues(lm.fit_sig))
plot(lm.fit_sig)
plot(lm.fit_sig)
plot(hatvalues(lm.fit_sig))
which.max(hatvalues(lm.fit_sig))
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit_sig <- lm(price ~ .-location - index - defect - defect_code - carbon - aluminium - niobium - weight - `linear feat`, data = ak_small)
summary(lm.fit_sig)
plot(lm.fit_sig)
plot(hatvalues(lm.fit_sig))
summary(lm.fit_sig) # r squared does not change at all after removing nosig variables
plot(lm.fit_sig)
which.max(hatvalues(lm.fit_sig))
ak_small[:,48]
ak_small[48]
ak_small[:,48]
ak_small[,48]
ak_small[48,]
myData <- myData[-c(48, 49), ]
ak_small <- ak_small[-c(48, 49), ]
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit) # not too much collinearity
par(mfrow=c(2,2))
plot(lm.fit) # residuals look very messed up
ak_total <- read_csv('clean_ak_df')
ak_small <- drop_na(ak_total)
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
ak_small <- ak_small[-c(48, 49), ]
plot(lm.fit) # residuals look very messed up
par(mfrow=c(2,2))
plot(lm.fit) # residuals look very messed up
ak_small <- ak_small[-c(48, 49), ]
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit) # not too much collinearity
par(mfrow=c(2,2))
plot(lm.fit) # residuals look very messed up
lm.fit_sig <- lm(price ~ .-location - index - defect - defect_code - carbon - aluminium - niobium - weight - `linear feat`, data = ak_small)
summary(lm.fit_sig) # r squared does not change at all after removing nosig variables
vif(lm.fit_sig) # no collineratiy
plot(lm.fit_sig)
plot(hatvalues(lm.fit_sig))
plot(lm.fit_sig)
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
ak_total <- read_csv('clean_ak_df')
ak_small <- drop_na(ak_total)
ak_small <- ak_small[-c(48, 49), ]
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit) # not too much collinearity
par(mfrow=c(2,2))
plot(lm.fit)
ak_small <- ak_small[-c(48, 49, 119), ]
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit) # not too much collinearity
par(mfrow=c(2,2))
plot(lm.fit) # residuals look very messed up
ak_small <- ak_small[-c(48, 49, 119, 116), ]
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit) # not too much collinearity
par(mfrow=c(2,2))
plot(lm.fit) # residuals look very messed up
ak_small <- ak_small[-c(48, 49, 119, 116, 10), ]
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit) # not too much collinearity
par(mfrow=c(2,2))
plot(lm.fit) # residuals look very messed up
summary(lm.fit_sig)
summary(lm.fit_sig)
summary(lm.fit_sig)
anova(lm.fit_sig, lm.fit)
anova(lm.fit_sig, lm.fit)
anova(lm.fit, lm.fit_sig)
ak_small <- drop_na(ak_total)
ak_small <- ak_small[-c(48, 49, 119, 116, 10), ]
#### working with the clean df, therefor we have all variables
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit) # not too much collinearity
par(mfrow=c(2,2))
plot(lm.fit) # residuals look very messed up
lm.fit_sig <- lm(price ~ .-location - index - defect - defect_code - carbon - aluminium - niobium - weight - `linear feat`, data = ak_small)
summary(lm.fit_sig) # r squared does not change at all after removing nosig variables
vif(lm.fit_sig) # no collineratiy
plot(lm.fit_sig)
plot(hatvalues(lm.fit_sig))
# trying to remove 48 and 49 observations
which.max(hatvalues(lm.fit_sig))
anova(lm.fit_sig, lm.fit)
anova(lm.fit_sig, lm.fit)
library("tidyverse")
library('car')
# cleaning df
ak_total <- read_csv('clean_ak_df')
ak_small <- drop_na(ak_total)
ak_small <- ak_small[-c(48, 49, 119, 116, 10), ]
#### working with the clean df, therefor we have all variables
lm.fit <- lm(price ~ .-location - index - defect - defect_code, data = ak_small)
summary(lm.fit)
vif(lm.fit) # not too much collinearity
par(mfrow=c(2,2))
plot(lm.fit) # residuals look very messed up
lm.fit_sig <- lm(price ~ .-location - index - defect - defect_code - carbon - aluminium - niobium - weight - `linear feat`, data = ak_small)
summary(lm.fit_sig) # r squared does not change at all after removing nosig variables
vif(lm.fit_sig) # no collineratiy
plot(lm.fit_sig)
plot(hatvalues(lm.fit_sig))
which.max(hatvalues(lm.fit_sig))
anova(lm.fit_sig, lm.fit)
plot(lm.fit_sig)
par(mfrow=c(2,2))
plot(lm.fit_sig)
summary(lm.fit_sig)
summary(lm.fit)
summary(lm.fit_sig)
ak_small
lm_fit_all <- lm(price ~ . )
lm_fit_all <- lm(price ~ ., data = ak_small )
contrasts(lm_fit_all)
contrasts(ak_small$defect)
contrasts(ak_small$defect_code)
contrasts(defect_code)
library("islr")
library("ISLR")
Carseats
type(Carseats)
Carseats
library("ISLR")
cars
library("tidyverse")
read_csv("ISL-python/datasets/Auto.csv")
setwd()
setwd("~/ISLR")
read_csv("ISL-python/datasets/Auto.csv")
auto_df <- read_csv("ISL-python/datasets/Auto.csv")
lm(mpg ~ horsepower, data = auto_df)
lm_simple <- lm(mpg ~ horsepower, data = auto_df)
summary(lm_simple)
auto_df
summary(auto_df)
auto_df$name
summary(lm_simple)
View(auto_df)
data.class(auto_df)
data.class(auto_df$horsepower)
auto_df$horsepower <- as.numeric(auto_df$horsepower)
auto_df<- na.omit(auto_df)
auto_df$horsepower <- as.numeric(auto_df$horsepower)
lm_simple <- lm(mpg ~ horsepower, data = auto_df)
summary(lm_simple)
confint(lm_simple)
predict(lm_simple, horsepower = 98)
predict(lm_simple, horsepower = c(98))
predict(lm_simple, data_frame(horsepower = c(98)))
predict(lm_simple, data_frame(horsepower = c(98)), interval = 'confidence')
predict(lm_simple, data_frame(horsepower = c(98)), interval = 'prediction')
abline(lm_simple)
plot(horsepower, mpg, data = auto_df)
plot(auto_df$horsepower, auto_df$mpg)
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_simple)
abline(lm_simple, color = "r" )
par(mfrow = c(2,2))
abline(lm_simple)
plot(lm.fit)
plot(lm_simple)
pairs(auto_df)
auto_df
as.numeric(auto_df)
auto_df <- data.frame(lapply(auto_df, function(x) as.numeric(as.character(x))))
auto_df <- na.omit(auto_df)
auto_df <- data.frame(lapply(auto_df, function(x) as.numeric(as.character(x))))
auto_df$horsepower <- as.numeric(auto_df$horsepower)
lm_simple <- lm(mpg ~ horsepower, data = auto_df)
summary(lm_simple)
confint(lm_simple)
predict(lm_simple, data_frame(horsepower = c(98)), interval = 'prediction')
plot(auto_df$horsepower, auto_df$mpg)
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_simple)
plot(auto_df$horsepower, auto_df$mpg)
auto_df <- na.omit(auto_df)
auto_df <- data.frame(lapply(auto_df, function(x) as.numeric(as.character(x))))
auto_df
auto_df <- read_csv("ISL-python/datasets/Auto.csv")
auto_df <- na.omit(auto_df)
auto_df <- data.frame(lapply(auto_df, function(x) as.numeric(as.character(x))))
auto_df <- na.omit(auto_df)
auto_df <- data.frame(lapply(auto_df, function(x) as.numeric(x)))
auto_df <- read_csv("ISL-python/datasets/Auto.csv")
auto_df <- na.omit(auto_df)
auto_df <- data.frame(lapply(auto_df, function(x) as.numeric(x)))
auto_df
auto_df <- read_csv("ISL-python/datasets/Auto.csv")
auto_df <- na.omit(auto_df)
auto_df
auto_df$horsepower <- as.numeric(auto_df$horsepower)
auto_df
pairs(auto_df)
auto_df <- read_csv("ISL-python/datasets/Auto.csv", na.strings = "?")
auto_df <- na.omit(auto_df)
auto_df
auto_df[,-1]
auto_df[,1:8]
auto_df[,1:9]
auto_df <- read_csv("ISL-python/datasets/Auto.csv", na.strings = "?")
auto_df <- na.omit(auto_df)
auto_df <- auto_df[,1:8]
auto_df$horsepower <- as.numeric(auto_df$horsepower)
lm_simple <- lm(mpg ~ horsepower, data = auto_df)
summary(lm_simple)
confint(lm_simple)
predict(lm_simple, data_frame(horsepower = c(98)), interval = 'prediction')
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_simple)
par(mfrow = c(2,2))
plot(lm_simple)
pairs(auto_df)
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_simple)
lm_quad <- lm(mpg ~ I(horsepower)^2)
lm_quad <- lm(mpg ~ I(horsepower)^2, data = auto_df)
summary(lm_quad)
plot(lm_quad)
abline(lm_quad)
abline(lm_quad)
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_quad)
lm_quad <- lm(mpg ~ I(horsepower)**2, data = auto_df)
abline(lm_quad)
abline(lm_quad)
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_quad)
lm_quad <- lm(mpg ~ I(horsepower^2), data = auto_df)
abline(lm_quad)
abline(lm_quad)
lm_quad <- lm(mpg ~ I(horsepower^2)+ horsepower, data = auto_df)
abline(lm_quad)
library("ISLR")
library("tidyverse")
auto_df <- read_csv("ISL-python/datasets/Auto.csv", na.strings = "?")
auto_df <- na.omit(auto_df)
auto_df <- auto_df[,1:8]
auto_df$horsepower <- as.numeric(auto_df$horsepower)
lm_simple <- lm(mpg ~ horsepower, data = auto_df)
summary(lm_simple)
# there is a statistical relationship between the two variables
# for every 1 unit of horse power, mileage decreases by .15 miles
confint(lm_simple)
# negative relationship
### predicting responses
predict(lm_simple, data_frame(horsepower = c(98)), interval = 'prediction')
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_simple)
par(mfrow = c(2,2))
plot(lm_simple)
pairs(auto_df)
## creating a exponential decay function
lm_quad <- lm(mpg ~ I(horsepower^2)+ horsepower, data = auto_df)
abline(lm_quad)
library("ISLR")
library("tidyverse")
auto_df <- read_csv("ISL-python/datasets/Auto.csv", na.strings = "?")
auto_df <- na.omit(auto_df)
auto_df <- auto_df[,1:8]
library("ISLR")
library("tidyverse")
auto_df <- read_csv("ISL-python/datasets/Auto.csv", na.strings = "?")
auto_df <- na.omit(auto_df)
auto_df <- auto_df[,1:8]
auto_df <- read_csv("ISL-python/datasets/Auto.csv", na.strings = "?")
auto_df <- na.omit(auto_df)
auto_df <- auto_df[,1:8]
auto_df$horsepower <- as.numeric(auto_df$horsepower)
lm_simple <- lm(mpg ~ horsepower, data = auto_df)
summary(lm_simple)
confint(lm_simple)
predict(lm_simple, data_frame(horsepower = c(98)), interval = 'prediction')
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_simple)
par(mfrow = c(2,2))
plot(lm_simple)
pairs(auto_df)
lm_quad <- lm(mpg ~ I(horsepower^2)+ horsepower, data = auto_df)
library("ISLR")
library("tidyverse")
auto_df <- read_csv("ISL-python/datasets/Auto.csv", na.strings = "?")
auto_df <- read_csv("ISL-python/datasets/Auto.csv")
auto_df <- na.omit(auto_df)
auto_df <- auto_df[,1:8]
auto_df$horsepower <- as.numeric(auto_df$horsepower)
lm_simple <- lm(mpg ~ horsepower, data = auto_df)
summary(lm_simple)
confint(lm_simple)
predict(lm_simple, data_frame(horsepower = c(98)), interval = 'prediction')
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_simple)
par(mfrow = c(2,2))
plot(lm_simple)
pairs(auto_df)
lm_quad <- lm(mpg ~ I(horsepower^2)+ horsepower, data = auto_df)
abline(lm_quad)
abline(lm_quad)
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_quad)
summary(lm_quad)
par(mfrow = c(2,2))
plot(lm_simple)
pairs(auto_df)
library("ISLR")
library("tidyverse")
auto_df <- read_csv("ISL-python/datasets/Auto.csv")
auto_df <- na.omit(auto_df)
auto_df <- auto_df[,1:8]
auto_df$horsepower <- as.numeric(auto_df$horsepower)
lm_simple <- lm(mpg ~ horsepower, data = auto_df)
summary(lm_simple)
confint(lm_simple)
predict(lm_simple, data_frame(horsepower = c(98)), interval = 'prediction')
plot(auto_df$horsepower, auto_df$mpg)
abline(lm_simple)
par(mfrow = c(2,2))
plot(lm_simple)
plot(lm_simple)
pairs(auto_df)
lm_quad <- lm(mpg ~ I(horsepower^2) + horsepower, data = auto_df)
summary(lm_quad)
lm_log <- lm(log(mpg) ~ ., data = auto_df)
summary(lm_quad)
summary(lm_log)
plot(lm_log)
par(mfrow = c(2,2))
plot(lm_log)
summary(carseats)
summary(Carseats)
lm(sales ~ Price + Urban + US, data = Carseats)
lm(Sales ~ Price + Urban + US, data = Carseats)
lm_car <- lm(Sales ~ Price + Urban + US, data = Carseats)
summarise(lm_car)
summary(lm_car)
lm_car_sig <- lm(Sales ~ Price + US, data = Carseats)
summary(lm_car_sig)
confint(lm_car_sig)
plot(lm_car_sig)
hatvalues(lm_car_sig)
typeof(hatvalues(lm_car_sig))
hatvalues(lm_car_sig)
which(hatvalues(lm_car_sig))
which(hatvalues(lm_car_sig) == max)
plot(lm_car_sig)
x = rnorm(100)
x
set.seed(1)
x = rnorm(100)
y = 2*x + rnorm(100) # creating true relationship but adding in gaussian variance
lm(y ~ x + 0)
lm(y ~ x)
sim_lm <- lm(y ~ x)
summary(sim_lm)
confint(sim_lm)
plot(sim_lm)
x <-  rnorm(100)
y <-  2*x + rnorm(100) # creating true relationship but adding in gaussian variance
sim_lm <- lm(y ~ x)
summary(sim_lm)
confint(sim_lm)
plot(sim_lm)
x <-  rnorm(1000)
y <-  2*x + rnorm(1000) # creating true relationship but adding in gaussian variance
sim_lm <- lm(y ~ x)
summary(sim_lm)
confint(sim_lm)
plot(sim_lm)
x <-  rnorm(10)
y <-  2*x + rnorm(10) # creating true relationship but adding in gaussian variance
sim_lm <- lm(y ~ x)
summary(sim_lm)
confint(sim_lm)
plot(sim_lm)
x <-  rnorm(100)
y <-  2*x + rnorm(100) # creating true relationship but adding in gaussian variance
sim_lm <- lm(y ~ x)
summary(sim_lm)
confint(sim_lm)
plot(sim_lm)
set.seed(1)
x <- rnorm(100)
x <- rnorm(100)
eps <- rnorm(100, 0, sqrt(.5))
y <- -1 + .5 * x + rnorm(100)
y <- -1 + .5 * x + eps
y
plot(x,y)
lm_13 <- lm(y ~x)
summary(lm_13)
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
par()
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
par(c(1))
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
par(c(1))
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
par(c(1,1))
lm_13_poly <- lm(y ~poly(x,2))
summary(lm_13_poly)
lm_13_poly <- lm(y ~I(x^2))
summary(lm_13_poly)
lm_13_poly <- lm(y ~I(x^2)+x)
summary(lm_13_poly)
